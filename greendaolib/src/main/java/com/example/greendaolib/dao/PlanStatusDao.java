package com.example.greendaolib.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.greendaolib.pojo.db.PlanStatus;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLAN_STATUS".
*/
public class PlanStatusDao extends AbstractDao<PlanStatus, Long> {

    public static final String TABLENAME = "PLAN_STATUS";

    /**
     * Properties of entity PlanStatus.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BelongsId = new Property(1, long.class, "belongsId", false, "BELONGS_ID");
        public final static Property IsColse = new Property(2, boolean.class, "isColse", false, "IS_COLSE");
        public final static Property CreatTime = new Property(3, long.class, "creatTime", false, "CREAT_TIME");
        public final static Property StartTime = new Property(4, long.class, "startTime", false, "START_TIME");
        public final static Property KeepTime = new Property(5, long.class, "keepTime", false, "KEEP_TIME");
        public final static Property CloseTime = new Property(6, Long.class, "closeTime", false, "CLOSE_TIME");
        public final static Property SummaryTime = new Property(7, Long.class, "summaryTime", false, "SUMMARY_TIME");
        public final static Property LastUpDateTime = new Property(8, Long.class, "lastUpDateTime", false, "LAST_UP_DATE_TIME");
        public final static Property State = new Property(9, String.class, "state", false, "STATE");
    };


    public PlanStatusDao(DaoConfig config) {
        super(config);
    }
    
    public PlanStatusDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLAN_STATUS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BELONGS_ID\" INTEGER NOT NULL ," + // 1: belongsId
                "\"IS_COLSE\" INTEGER NOT NULL ," + // 2: isColse
                "\"CREAT_TIME\" INTEGER NOT NULL ," + // 3: creatTime
                "\"START_TIME\" INTEGER NOT NULL ," + // 4: startTime
                "\"KEEP_TIME\" INTEGER NOT NULL ," + // 5: keepTime
                "\"CLOSE_TIME\" INTEGER," + // 6: closeTime
                "\"SUMMARY_TIME\" INTEGER," + // 7: summaryTime
                "\"LAST_UP_DATE_TIME\" INTEGER," + // 8: lastUpDateTime
                "\"STATE\" TEXT NOT NULL );"); // 9: state
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLAN_STATUS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PlanStatus entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getBelongsId());
        stmt.bindLong(3, entity.getIsColse() ? 1L: 0L);
        stmt.bindLong(4, entity.getCreatTime());
        stmt.bindLong(5, entity.getStartTime());
        stmt.bindLong(6, entity.getKeepTime());
 
        Long closeTime = entity.getCloseTime();
        if (closeTime != null) {
            stmt.bindLong(7, closeTime);
        }
 
        Long summaryTime = entity.getSummaryTime();
        if (summaryTime != null) {
            stmt.bindLong(8, summaryTime);
        }
 
        Long lastUpDateTime = entity.getLastUpDateTime();
        if (lastUpDateTime != null) {
            stmt.bindLong(9, lastUpDateTime);
        }
        stmt.bindString(10, entity.getState());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PlanStatus entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getBelongsId());
        stmt.bindLong(3, entity.getIsColse() ? 1L: 0L);
        stmt.bindLong(4, entity.getCreatTime());
        stmt.bindLong(5, entity.getStartTime());
        stmt.bindLong(6, entity.getKeepTime());
 
        Long closeTime = entity.getCloseTime();
        if (closeTime != null) {
            stmt.bindLong(7, closeTime);
        }
 
        Long summaryTime = entity.getSummaryTime();
        if (summaryTime != null) {
            stmt.bindLong(8, summaryTime);
        }
 
        Long lastUpDateTime = entity.getLastUpDateTime();
        if (lastUpDateTime != null) {
            stmt.bindLong(9, lastUpDateTime);
        }
        stmt.bindString(10, entity.getState());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PlanStatus readEntity(Cursor cursor, int offset) {
        PlanStatus entity = new PlanStatus( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // belongsId
            cursor.getShort(offset + 2) != 0, // isColse
            cursor.getLong(offset + 3), // creatTime
            cursor.getLong(offset + 4), // startTime
            cursor.getLong(offset + 5), // keepTime
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // closeTime
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // summaryTime
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // lastUpDateTime
            cursor.getString(offset + 9) // state
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PlanStatus entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBelongsId(cursor.getLong(offset + 1));
        entity.setIsColse(cursor.getShort(offset + 2) != 0);
        entity.setCreatTime(cursor.getLong(offset + 3));
        entity.setStartTime(cursor.getLong(offset + 4));
        entity.setKeepTime(cursor.getLong(offset + 5));
        entity.setCloseTime(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setSummaryTime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setLastUpDateTime(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setState(cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PlanStatus entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PlanStatus entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
