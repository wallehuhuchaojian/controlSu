package com.example.greendaolib.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.greendaolib.pojo.db.PlanSummary;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLAN_SUMMARY".
*/
public class PlanSummaryDao extends AbstractDao<PlanSummary, Long> {

    public static final String TABLENAME = "PLAN_SUMMARY";

    /**
     * Properties of entity PlanSummary.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BeLongsId = new Property(1, long.class, "beLongsId", false, "BE_LONGS_ID");
        public final static Property Rate = new Property(2, float.class, "rate", false, "RATE");
        public final static Property Evaluation = new Property(3, String.class, "evaluation", false, "EVALUATION");
    };


    public PlanSummaryDao(DaoConfig config) {
        super(config);
    }
    
    public PlanSummaryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLAN_SUMMARY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BE_LONGS_ID\" INTEGER NOT NULL ," + // 1: beLongsId
                "\"RATE\" REAL NOT NULL ," + // 2: rate
                "\"EVALUATION\" TEXT);"); // 3: evaluation
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLAN_SUMMARY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PlanSummary entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getBeLongsId());
        stmt.bindDouble(3, entity.getRate());
 
        String evaluation = entity.getEvaluation();
        if (evaluation != null) {
            stmt.bindString(4, evaluation);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PlanSummary entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getBeLongsId());
        stmt.bindDouble(3, entity.getRate());
 
        String evaluation = entity.getEvaluation();
        if (evaluation != null) {
            stmt.bindString(4, evaluation);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PlanSummary readEntity(Cursor cursor, int offset) {
        PlanSummary entity = new PlanSummary( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // beLongsId
            cursor.getFloat(offset + 2), // rate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // evaluation
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PlanSummary entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBeLongsId(cursor.getLong(offset + 1));
        entity.setRate(cursor.getFloat(offset + 2));
        entity.setEvaluation(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PlanSummary entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PlanSummary entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
