package com.example.greendaolib.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.greendaolib.pojo.db.GroupString;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUP_STRING".
*/
public class GroupStringDao extends AbstractDao<GroupString, Long> {

    public static final String TABLENAME = "GROUP_STRING";

    /**
     * Properties of entity GroupString.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Type = new Property(0, String.class, "type", false, "TYPE");
        public final static Property Id = new Property(1, Long.class, "id", true, "_id");
        public final static Property Str = new Property(2, String.class, "str", false, "STR");
        public final static Property Index = new Property(3, int.class, "index", false, "INDEX");
        public final static Property BelongsId = new Property(4, long.class, "belongsId", false, "BELONGS_ID");
    };


    public GroupStringDao(DaoConfig config) {
        super(config);
    }
    
    public GroupStringDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP_STRING\" (" + //
                "\"TYPE\" TEXT," + // 0: type
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 1: id
                "\"STR\" TEXT NOT NULL ," + // 2: str
                "\"INDEX\" INTEGER NOT NULL ," + // 3: index
                "\"BELONGS_ID\" INTEGER NOT NULL );"); // 4: belongsId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP_STRING\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupString entity) {
        stmt.clearBindings();
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(1, type);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
        stmt.bindString(3, entity.getStr());
        stmt.bindLong(4, entity.getIndex());
        stmt.bindLong(5, entity.getBelongsId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupString entity) {
        stmt.clearBindings();
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(1, type);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
        stmt.bindString(3, entity.getStr());
        stmt.bindLong(4, entity.getIndex());
        stmt.bindLong(5, entity.getBelongsId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    @Override
    public GroupString readEntity(Cursor cursor, int offset) {
        GroupString entity = new GroupString( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // type
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
            cursor.getString(offset + 2), // str
            cursor.getInt(offset + 3), // index
            cursor.getLong(offset + 4) // belongsId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupString entity, int offset) {
        entity.setType(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setStr(cursor.getString(offset + 2));
        entity.setIndex(cursor.getInt(offset + 3));
        entity.setBelongsId(cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GroupString entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GroupString entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
